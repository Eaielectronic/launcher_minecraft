/**
 * Script de pr√©chargement (Preload)
 * Cr√©e une interface s√©curis√©e entre le processus de rendu et le processus principal
 */

const { contextBridge, ipcRenderer } = require('electron');

// Ajouter des logs pour d√©boguer
console.log('Preload script is running...');

// Exposer des fonctionnalit√©s s√©curis√©es au processus de rendu
let isLoggingIn = false;

contextBridge.exposeInMainWorld('launcher', {
  // Gestion des fen√™tres
  minimizeWindow: () => ipcRenderer.send('window-minimize'),
  maximizeWindow: () => ipcRenderer.send('window-maximize'),
  closeWindow: () => ipcRenderer.send('window-close'),
  
  // Authentification
  loginWithMicrosoft: async () => {
    if (isLoggingIn) {
      console.log('Une tentative de connexion est d√©j√† en cours...');
      return;
    }
    
    isLoggingIn = true;
    
    try {
      console.log('loginWithMicrosoft appel√© depuis preload.js');
      const result = await ipcRenderer.invoke('auth:microsoft-login');
      isLoggingIn = false;
      return result;
    } catch (error) {
      isLoggingIn = false;
      throw error;
    }
  },
  loginOffline: (username) => ipcRenderer.send('login-offline', username),
  logout: () => ipcRenderer.send('logout'),
  checkLoginStatus: () => ipcRenderer.invoke('check-login-status'),
  
  // Jeu
  launchGame: () => ipcRenderer.send('launch-game'),
  checkServerStatus: () => ipcRenderer.send('check-server-status'),
  checkModsStatus: () => ipcRenderer.send('check-mods-status'),
  
  // Pr√©f√©rences
  getPreferences: () => ipcRenderer.invoke('get-preferences'),
  saveTheme: (theme) => ipcRenderer.send('save-theme', theme),
  saveMaxMemory: (memory) => ipcRenderer.send('save-max-memory', memory),
  saveDirectory: (dir) => ipcRenderer.send('save-launcher-directory', dir),
  selectDirectory: () => ipcRenderer.invoke('select-directory'),
  
  // √âv√©nements √† √©couter
  onLoginSuccess: (callback) => {
    console.log('Enregistrement du gestionnaire onLoginSuccess dans preload');
    
    ipcRenderer.on('login-success', (event, userData) => {
      console.log('üîµ √âv√©nement login-success re√ßu dans preload avec donn√©es:', userData);
      
      // Ex√©cuter le callback
      callback(userData);
      
      // Forcer l'affichage de l'√©cran principal apr√®s un court d√©lai
      setTimeout(() => {
        // Cr√©er un √©v√©nement personnalis√© pour forcer l'affichage
        document.dispatchEvent(new CustomEvent('force-display-main', {
          detail: userData
        }));
      }, 300);
    });
  },
  onLoginError: (callback) => {
    ipcRenderer.on('login-error', (_, error) => callback(error));
  },
  onLogoutSuccess: (callback) => {
    ipcRenderer.on('logout-success', () => callback());
  },
  onLaunchProgress: (callback) => {
    ipcRenderer.on('launch-progress', (_, data) => callback(data));
  },
  onLaunchSuccess: (callback) => {
    ipcRenderer.on('launch-success', () => callback());
  },
  onLaunchError: (callback) => {
    ipcRenderer.on('launch-error', (_, error) => callback(error));
  },
  onDownloadProgress: (callback) => {
    ipcRenderer.on('download-progress', (_, data) => callback(data));
  },
  onServerStatus: (callback) => {
    ipcRenderer.on('server-status', (_, status) => callback(status));
  },
  onModsStatus: (callback) => {
    ipcRenderer.on('mods-status', (_, status) => callback(status));
  },
  onServerMaintenanceWarning: (callback) => {
    ipcRenderer.on('server-maintenance-warning', () => callback());
  },
  
  // Fonctions pour mettre √† jour l'UI
  updateServerStatus: (status) => {
    // Cette fonction sera impl√©ment√©e dans renderer.js
  },
  updateModsStatus: (status) => {
    // Cette fonction sera impl√©ment√©e dans renderer.js
  },
  updateLaunchProgress: (status, progress) => {
    // Cette fonction sera impl√©ment√©e dans renderer.js
  },
  updateDownloadProgress: (type, progress) => {
    // Cette fonction sera impl√©ment√©e dans renderer.js
  }
});

console.log('API launcher expos√©e:', Object.keys(contextBridge.exposeInMainWorld).length > 0);

// Simplification du renderer.js pour √©viter les conflits

console.log('Chargement du script renderer simplifi√©');

// Ajouter un √©couteur pour l'√©v√©nement personnalis√© 'force-display-main'
document.addEventListener('force-display-main', (event) => {
  console.log('‚ö° √âv√©nement force-display-main captur√© avec les donn√©es:', event.detail);
  showHomeScreen(event.detail);
});

// Am√©liorer la fonction showHomeScreen
function showHomeScreen(userData) {
  console.log('üè† Tentative d\'affichage de l\'√©cran d\'accueil pour:', userData.name);
  
  // S'assurer que userData est valide
  if (!userData || !userData.name) {
    console.error('‚ùå Donn√©es utilisateur invalides:', userData);
    return;
  }
  
  // Attendre que le DOM soit compl√®tement charg√©
  if (document.readyState !== 'complete') {
    console.log('‚è≥ DOM pas encore compl√®tement charg√©, nouvelle tentative dans 500ms');
    setTimeout(() => showHomeScreen(userData), 500);
    return;
  }
  
  // Masquer tous les √©crans de connexion
  document.querySelectorAll('[id*="login"], .login, #login-screen, .login-container').forEach(el => {
    el.style.cssText = 'display: none !important; visibility: hidden !important; opacity: 0 !important;';
    console.log('üîí √âcran de connexion masqu√©:', el.id || el.className || '√©l√©ment sans id');
  });
  
  // Trouver l'√©cran d'accueil (essayer plusieurs ID et classes possibles)
  const homeScreen = document.getElementById('home-screen') || 
                     document.getElementById('main-screen') ||
                     document.querySelector('.home-container') ||
                     document.querySelector('.main-container');
  
  if (homeScreen) {
    // Forcer l'affichage avec !important et v√©rifier que les styles sont appliqu√©s
    homeScreen.style.cssText = 'display: flex !important; visibility: visible !important; opacity: 1 !important; z-index: 9999 !important;';
    
    // V√©rifier que les styles ont bien √©t√© appliqu√©s
    const computedStyle = window.getComputedStyle(homeScreen);
    console.log('‚úÖ Styles appliqu√©s √† l\'√©cran d\'accueil:', {
      display: computedStyle.display,
      visibility: computedStyle.visibility,
      opacity: computedStyle.opacity,
      zIndex: computedStyle.zIndex
    });
    
    // Mise √† jour des informations utilisateur avec plus de robustesse
    updateUserInfo(userData);
    
    // Animer les √©l√©ments d'interface
    animateHomeElements();
  } else {
    console.error('‚ùå ERREUR CRITIQUE: √âcran d\'accueil non trouv√© dans le DOM!');
    debugDOM();
  }
}

// Fonction pour mettre √† jour les informations utilisateur
function updateUserInfo(userData) {
  // Essayer plusieurs s√©lecteurs possibles pour le nom d'utilisateur
  const usernameDisplays = [
    document.getElementById('username-display'),
    document.querySelector('.username'),
    document.querySelector('[data-username]')
  ].filter(Boolean);
  
  if (usernameDisplays.length > 0) {
    usernameDisplays.forEach(el => {
      el.textContent = userData.name;
      console.log('üë§ Nom d\'utilisateur mis √† jour dans:', el.id || el.className);
    });
  } else {
    console.error('‚ùå Aucun √©l√©ment pour afficher le nom d\'utilisateur trouv√©');
  }
  
  // Essayer plusieurs s√©lecteurs possibles pour l'avatar
  const avatarElements = [
    document.getElementById('user-avatar'),
    document.getElementById('avatar-display'),
    document.querySelector('.avatar'),
    document.querySelector('[data-avatar]')
  ].filter(Boolean);
  
  if (avatarElements.length > 0) {
    avatarElements.forEach(el => {
      el.src = `https://mc-heads.net/avatar/${userData.id}/100`;
      el.alt = `Avatar de ${userData.name}`;
      console.log('üñºÔ∏è Avatar mis √† jour dans:', el.id || el.className);
    });
  } else {
    console.error('‚ùå Aucun √©l√©ment pour afficher l\'avatar trouv√©');
  }
}

// Fonction pour animer les √©l√©ments de la page d'accueil
function animateHomeElements() {
  setTimeout(() => {
    const elements = document.querySelectorAll('.home-element, .main-element');
    console.log(`üé¨ Animation de ${elements.length} √©l√©ments`);
    
    elements.forEach((el, index) => {
      setTimeout(() => {
        el.classList.add('visible');
      }, index * 100);
    });
  }, 300);
}

// Fonction pour d√©boguer le DOM
function debugDOM() {
  console.log('üîç D√©bogage du DOM:');
  console.log('- Document readyState:', document.readyState);
  
  // Lister tous les IDs
  const allIds = Array.from(document.querySelectorAll('[id]')).map(el => el.id);
  console.log('- IDs disponibles:', allIds);
  
  // Lister toutes les classes
  const allClasses = Array.from(document.querySelectorAll('[class]'))
    .map(el => Array.from(el.classList))
    .flat()
    .filter((v, i, a) => a.indexOf(v) === i);
  console.log('- Classes disponibles:', allClasses);
}

// Initialisation apr√®s le chargement du DOM
document.addEventListener('DOMContentLoaded', () => {
  console.log('DOM charg√© dans renderer simplifi√©');
  
  // V√©rifier si l'utilisateur est d√©j√† connect√©
  if (window.launcher?.checkLoginStatus) {
    window.launcher.checkLoginStatus()
      .then(userData => {
        if (userData) {
          console.log('Utilisateur d√©j√† connect√©:', userData);
          showHomeScreen(userData);
        } else {
          console.log('Aucun utilisateur connect√©');
        }
      })
      .catch(err => console.error('Erreur lors de la v√©rification du statut de connexion:', err));
  }
  
  // Installer l'√©couteur d'√©v√©nement de connexion avec plus de robustesse
  if (window.launcher) {
    window.launcher.onLoginSuccess(userData => {
      console.log('√âv√©nement login-success re√ßu avec les donn√©es:', userData);
      if (userData) {
        showHomeScreen(userData);
      } else {
        console.error('Donn√©es utilisateur manquantes dans l\'√©v√©nement login-success');
      }
    });
  } else {
    console.error('window.launcher n\'est pas disponible!');
  }
  
  // Installer les √©couteurs d'√©v√©nement
  if (window.launcher) {
    window.launcher.onLogoutSuccess(() => {
      console.log('√âv√©nement logout-success re√ßu');
      const homeScreen = document.getElementById('home-screen') || 
                         document.getElementById('main-screen');
      if (homeScreen) homeScreen.style.display = 'none';
      
      const loginScreen = document.getElementById('login-screen');
      if (loginScreen) loginScreen.style.display = 'flex';
    });
    
    // Installer les gestionnaires de bouton
    const launchBtn = document.getElementById('launch-btn');
    if (launchBtn) {
      launchBtn.addEventListener('click', () => {
        launchBtn.textContent = 'LANCEMENT EN COURS...';
        launchBtn.disabled = true;
        window.launcher.launchGame();
      });
    }
  }
});